<pre># LuaObfuscator API

### Create New Session
HTTP POST `https://luaobfuscator.com/api/obfuscator/newscript`

HEADERS: `apikey:test`

```lua
print("test")
```

Return example:
```json
{
    "message": null,
    "code": null,
    "sessionId": "z5GIjc54ZbAz757L7GNG5cjnqI5eBL8X0s3F1TD0hQ6Xq4MK7xZhjtg18sJ085Pb"
}
```

Returned header `sessionId`

Example: 
```bash
curl -X POST https://luaobfuscator.com/api/obfuscator/newscript \
-H "Content-type: application/json" \
-H "apikey: test" \
-d 'print("test")'
```

### Obfusate Selected Session

HTTP POST `https://luaobfuscator.com/api/obfuscator/obfuscate/`

HEADERS: `apikey:test` & `sessionId:X`

```json
{
    "MinifiyAll":false,
    "ChopChain":false,
    "funcs":null,
    "variables":null,
    "Virtualize":false,
    "Virtualize2":false,
    "CustomPlugins": {
        "SwizzleLookups" : [100],
        "EncryptStrings" : [100],
        "RevertAllIfStatements": [50],
        "ControlFlowFlattenAllBlocks": [75]
    }
}
```

Return example:
```json
{
    "message": null,
    "code": "local obf_stringchar = string.char;\nlocal obf_stringbyte = string.byte;\nlocal obf_stringsub = string.sub;\nlocal obf_bitlib = bit32 or bit;\nlocal obf_XOR = obf_bitlib.bxor;\nlocal obf_tableconcat = table.concat;\nlocal obf_tableinsert = table.insert;\nlocal function LUAOBFUSACTOR_DECRYPT_STR_0(LUAOBFUSACTOR_STR, LUAOBFUSACTOR_KEY)\n\tlocal result = {};\n\tfor i = 1, #LUAOBFUSACTOR_STR do\n\t\tobf_tableinsert(result, obf_stringchar(obf_XOR(obf_stringbyte(obf_stringsub(LUAOBFUSACTOR_STR, i, i + 1)), obf_stringbyte(obf_stringsub(LUAOBFUSACTOR_KEY, 1 + ((i - 1) % #LUAOBFUSACTOR_KEY), 1 + ((i - 1) % #LUAOBFUSACTOR_KEY) + 1))) % 256));\n\tend\n\treturn obf_tableconcat(result);\nend\nprint(LUAOBFUSACTOR_DECRYPT_STR_0(\"\\199\\165\\231\\106\", \"\\179\\192\\148\\30\\87\\70\\81\"));\n",
    "sessionId": null
}
```

Example: 
```bash
curl -X POST https://luaobfuscator.com/api/obfuscator/obfuscate \
-H "Content-type: application/json" \
-H "apikey: test" \
-d '{ "MinifiyAll":false, "ChopChain":false, "funcs":null, "variables":null, "Virtualize":false, "Virtualize2":false, "CustomPlugins": { "SwizzleLookups" : [100], "EncryptStrings" : [100], "RevertAllIfStatements": [50],"ControlFlowFlattenAllBlocks": [75] } }' \
-H "sessionId: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
```


Or a complete example would be

```bash
curl -X POST https://luaobfuscator.com/api/obfuscator/newscript \
-H "Content-type: application/json" \
-H "apikey: test" \
-d 'print("test")' \
| curl -X POST https://luaobfuscator.com/api/obfuscator/obfuscate \
-H "Content-type: application/json" \
-H "apikey: test" \
-d '{ "MinifiyAll":false, "ChopChain":false, "funcs":null, "variables":null, "Virtualize":false, "Virtualize2":false, "CustomPlugins": { "SwizzleLookups" : [100], "EncryptStrings" : [100], "RevertAllIfStatements": [50],"ControlFlowFlattenAllBlocks": [75] } }' \
-H "sessionId: $(grep -o -P '(?<="sessionId":").*(?="})')"
```

Variation to read a `file.lua` from disk

```bash
curl -X POST https://luaobfuscator.com/api/obfuscator/newscript \
-H "Content-type: application/json" \
-H "apikey: test" \
-d $(cat file.lua) \
| curl -X POST https://luaobfuscator.com/api/obfuscator/obfuscate \
-H "Content-type: application/json" \
-H "apikey: test" \
-d '{ "MinifiyAll":false, "ChopChain":false, "funcs":null, "variables":null, "Virtualize":false, "Virtualize2":false, "CustomPlugins": { "SwizzleLookups" : [100], "EncryptStrings" : [100], "RevertAllIfStatements": [50],"ControlFlowFlattenAllBlocks": [75] } }' \
-H "sessionId: $(grep -o -P '(?<="sessionId":").*(?="})')" \
| jq -r ".code" \
> public/loader.lua
```</pre>